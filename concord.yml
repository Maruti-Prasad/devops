configuration:
  dependencies:
  - "mvn://org.codehaus.groovy:groovy-all:pom:2.5.23"
  runtime: "concord-v2"
  arguments:
    serviceAD1:
    - "value1"
    - "value2"
    ServiceAD2:
    - "value3"
    - "value4"
    ServiceAD3: ["v1", "v2", "v3"]

forms:
  Concord:
  - selectedService: 
      label: "Select Secret Group"
      type: "string"
      allow: ["serviceAD1", "ServiceAD2"]
  - SecretName: { label: "Name of the secret for change", type: "string",  placeholder: "Place name here" }
  - data: { label: "data", type: "string", inputType: "password" }
  - updatePassword: { label: "Accept for Password update job run", type: boolean }
  Akeyless:
  - SecretType: { label: "Secret Type", type: "string", allow: ["generic", "password"], search: true }
  - SecretName: { label: "Name of the secret for Akeyless change", type: "string",  placeholder: "Place name here" }
  - data: { label: "secret", type: "string", inputType: "password" }
  - updatePassword: { label: "Accept for Password update job run", type: boolean }

flows:
  Akeyless:
  - form: Akeyless
  - if: ${Akeyless.updatePassword}
    then:
      - log: "[INFO] Accepted for Password update ..."
    else:
      - throw: "[ERROR] Password update is not accepted ..."

  - task: http
    in:
      method: POST
      headers:
        Content-Type: "application/json"
      url: "https://api.akeyless.io/auth"
      ignoreErrors: false
      request: json
      response: json
      body: |
        {
            "access-type": "api_key",
            "access-id": "p-l391pmos0f0kam",
            "access-key": "suUzBZTfp5yEBEPVhe919W5RFVsRR5mCBZMy2IoVxok="
        }
    out: response

  - log: "${response.content.token}"
  - if: ${Akeyless.SecretType == "generic"}
    then:
      - task: http
        in:
          method: POST
          headers:
            Content-Type: "application/json"
            Authorization: "Bearer ${response.content.token}"
          url: "https://api.akeyless.io/create-secret"
          ignoreErrors: false
          request: json
          response: json
          body: |
            {
                "name": "/prod/test/${Akeyless.SecretName}",
                "value": "${Akeyless.data}",
                "type": "generic",
                "token": "${response.content.token}",
                "keep-prev-version": "true"
            }
        out: response
    else:
      - task: http
        in:
          method: POST
          headers:
            Content-Type: "application/json"
            Authorization: "Bearer ${response.content.token}"
          url: "https://api.akeyless.io/create-secret"
          ignoreErrors: false
          request: json
          response: json
          body: |
            {
                "name": "/prod/test/${Akeyless.SecretName}",
                "password": "${Akeyless.data}",
                "type": "password",
                "token": "${response.content.token}",
                "keep-prev-version": "true"
            }
        out: response

  - if: ${response.statusCode != "200"}
    then:
      - throw: "${Akeyless.SecretName} Failed to update :: ${response.error}"

  concord:
  - form: Concord
  - if: ${Concord.updatePassword}
    then:
      - log: "[INFO] Accepted for Password update ..."
    else:
      - log: "[ERROR] Password update is not accepted ..."
      - exit

  - log: "${datetime.format(datetime.current(), 'dd_MM_yyyy')}"
  - set:
      date: "${datetime.format(datetime.current(), 'dd_MM_yyyy')}"
          
  - log: "User selected service group: ${Concord.selectedService}"
  - log: "${Concord.selectedService.toList()}"

  - task: concordSecrets
    in:
      action: getAsString
      name: ${Concord.SecretName}
      ignoreErrors: false
    out: result
  - log: "Validate Result: ${result}"
  - if: ${result.status != "OK"}
    then:
      - throw: "${Concord.SecretName} 'NOT_FOUND'"

  - log: "create backup secret"
  - task: concordSecrets
    in:
      action: create
      ignoreErrors: false
      name: "${Concord.SecretName}_${date}"
      data: "${result.data}"
      createIfMissing: true

  - log: "print backup secret"
  - task: concordSecrets
    in:
      action: getAsString
      name: "${Concord.SecretName}_${date}"
      ignoreErrors: false
    out: backup
  - log: "Validate Result: ${backup.data}"

  - task: concordSecrets
    in:
      action: update
      ignoreErrors: false
      name: "${Concord.SecretName}"
      visibility: "PRIVATE"
      data: "${Concord.data}"
