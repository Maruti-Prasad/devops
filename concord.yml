configuration:
  dependencies:
  - "mvn://org.codehaus.groovy:groovy-all:pom:2.5.23"
  - "mvn://org.python:jython-standalone:2.7.4"
  - "mvn://org.jruby:jruby:9.1.17.0"
  - "mvn://com.walmartlabs.concord.plugins.basic:ansible-tasks:2.14.0"


  runtime: "concord-v2"
  arguments:
    saDCSlinuxSVC: ["saDCSlinuxSVC_test", "sadcslinuxsvc_pass_test", "saDCSlinuxSVC_user_test", "looper_http_api_token_test","osp_ad_svc_password_test"]
    SVCWindowsCM: ["svcWindowsCM_password_test"]
    SVC_Puppeteer: ["svc_pass_test"]
    SVCpuptlmtd: ["svcpuptlmtd_test"]
forms:
  Concord:
  - selectedService:
      label: "Select Secret Group"
      type: "string"
      allow: ["saDCSlinuxSVC", "SVCWindowsCM","SVC_Puppeteer","SVCpuptlmtd"]
  - Password: { label: "Password", type: "string", inputType: "password" }  

flows:
  default:
  - form: Concord
  - set:
      date: "${datetime.format(datetime.current(), 'dd_MM_yyyy')}"
      service: "${Concord.selectedService}"
  - log: "Validate Result: ${service}"
  - script: python
    body: |
      service_list = globals()[service]
      comma_separated = ", ".join(service_list)
      result.set("list", service_list)  # Original list
      result.set("comma_list", comma_separated)  # Comma-separated string
    out:
      list: ${result.list}
      comma_list: ${result.comma_list
  - form: ApprovalForm
    fields:
      - approval: { label: "Approve password update for: [secrets] â†’ ${comma_list}", type: boolean }
  - if: ${ApprovalForm.approval}
    then:
      - log: "[INFO] Accepted for Password update ..."
    else:
      - throw: "[ERROR] Password update is not accepted ..."

  - if: ${service == "SVCWindowsCM"}
    then: 
      - call: SVCWindowsCM
        in:
          user: "svcwindowscm"
      - call: concord
        withItems: ${list}
  - if: ${service == "saDCSlinuxSVC"}
    then:
      - call: SVCWindowsCM
        in:
          user: "sadcslinuxsvc_test"
      - call: concord
        withItems: ${list}
  - if: ${service == "Puppeteer"}
    then: 
      - call: Akeyless
        withItems: ${list}
  - if: ${service == "SVCpuptlmtd"}
    then:
      - call: Akeyless
        withItems: ${list}

  saDCSlinuxSVC:
  - task: concordSecrets
    in:
      action: getAsString
      name: sadcslinuxsvc_pass_test
      ignoreErrors: false
    out: result 
  - log: "Validate Result: ${result}"
  - set:
      svc_pass: "${result.data}"
  - script: ruby
    body: |
      require 'base64'
      v = $execution.variables().get('svc_pass')
      text = "sadcslinuxsvc:" + v
      encoded = Base64.encode64(text)
      $result.set("myVar", encoded);
    out:
      svc_base64: ${result.myVar}
  - log: "${svc_base64}"

#Akeyless Flow
  SVCWindowsCM:
  - task: concordSecrets
    in:
      action: getAsString
      name: sadcslinuxsvc_pass
      ignoreErrors: false
    out: result     
  - log: "Validate Result: ${result}"

  - task: akeyless
    in:
      action: updateSecret
      apiBasePath: "https://akeyless.gw.prod.glb.us.walmart.net:8080/v2"
      auth:
        ldap:
          accessId: p-8dydleky17zq
          credentials:
            username: saDCSlinuxSVC # change SVC account used, must be member of ConfigurationManagement AD group
            password: ${result.data}     
      path: "/Prod/WCNP/homeoffice/ConfigurationManagement/puppet/PE/${user}"
      value: "${Concord.Password}"

#puppet Flow
  SVCpuptlmtd:
  - task: akeyless
    in:
      action: updateSecret
      apiBasePath: "https://akeyless.gw.prod.glb.us.walmart.net:8080/v2"
      auth:
        ldap:
          accessId: p-8dydleky17zq
          credentials:
            username: saDCSlinuxSVC # change SVC account used, must be member of ConfigurationManagement AD group
            password: ${result.data}     
      path: "/Prod/WCNP/homeoffice/ConfigurationManagement/puppet/PE/svcwindowscm_test"
      value: "${Akeyless.data}"

#Concord Flow
  concord:
  - log: "Get existing secret for ${item}"
  - task: concordSecrets
    in:
      action: getAsString
      name: ${item}
      ignoreErrors: false
    out: result
  - log: "Validate Result: ${result}"
  - if: ${result.status != "OK"}
    then:
      - throw: "${item} 'NOT_FOUND'"

  - log: "create backup secret"
  - task: concordSecrets
    in:
      action: create
      ignoreErrors: false
      name: "${item}_${date}"
      data: "${result.data}"
      createIfMissing: true

  - log: "print backup secret"
  - task: concordSecrets
    in:
      action: getAsString
      name: "${item}_${date}"
      ignoreErrors: false
    out: backup
  - log: "Validate Result: ${backup.data}"

  - task: concordSecrets
    in:
      action: update
      ignoreErrors: false
      name: "${item}"
      visibility: "PRIVATE"
      data: "${Concord.Password}"
