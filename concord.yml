configuration:
  dependencies:
  - "mvn://org.codehaus.groovy:groovy-all:pom:2.5.23"
  - "mvn://org.python:jython-standalone:2.7.4"
  - "mvn://org.jruby:jruby:9.1.17.0"
  - "mvn://com.walmartlabs.concord.plugins.basic:ansible-tasks:2.14.0"
  - "mvn://com.walmartlabs.concord.plugins.basic:smtp-tasks:1.76.1"
  runtime: "concord-v2"
  arguments:
    maintainerEmail: ""
    saDCSlinuxSVC: 
      concord: ["saDCSlinuxSVC_test", "saDCSlinuxSVC_user_test"]
      akeyless: ["looper_http_api_token_test", "osp_ad_svc_password_test"]
    SVCWindowsCM: 
      concord: ["svcWindowsCM_test", "svcWindowsCM_password_test"]
      akeyless: ["svcWindowsCM_test1", "svcWindowsCM_password_test1"]
    SVC_Puppeteer: 
      concord: ["svc_pass_test"]
    SVCpuptlmtd: 
      concord: ["svcpuptlmtd_test"]

forms:
  Ansible:
  - data: { label: "password", type: "string", inputType: "password" }
  Concord:
  - selectedService:
      label: "Select Secret Group"
      type: "string"
      allow: ["saDCSlinuxSVC", "SVCWindowsCM","SVC_Puppeteer","SVCpuptlmtd"]
  - Password: { label: "Password", type: "string", inputType: "password" }  

flows:
  default:
  - form: Concord
  - set:
      date: "${datetime.format(datetime.current(), 'dd_MM_yyyy')}"
      service: "${Concord.selectedService}"
      svc_pass: "${Concord.Password}"
      WM_Config: |
        ansible_port: 5985
        ansible_user: "${Concord.selectedService}"
        ansible_password: "${Concord.Password}"
        ansible_connection: winrm
        ansible_winrm_server_cert_validation: ignore
        ansible_winrm_transport: ntlm
        ansible_winrm_operation_timeout_sec: 120
        ansible_winrm_read_timeout_sec: 130
        ansible_winrm_message_encryption: auto
  
  - script: python
    body: |
      svc_data = globals()[service]
      concord_list = svc_data.get("concord")
      akeyless_list = svc_data.get("akeyless")
      if concord_list:
        comma_concord = ", ".join(concord_list)
      else:
        concord_list = []
        comma_concord = "N/A"
      if akeyless_list:
        comma_akeyless = ", ".join(akeyless_list)
      else:
        akeyless_list = []
        comma_akeyless = "N/A"
      result.set("concord_list", concord_list)
      result.set("akeyless_list", akeyless_list)
      result.set("comma_concord", comma_concord)
      result.set("comma_akeyless", comma_akeyless)
    out:
      concord_list: ${result.concord_list}
      akeyless_list: ${result.akeyless_list}
      comma_concord_list: ${result.comma_concord}     
      comma_akeyless_list: ${result.comma_akeyless}

  - form: ApprovalForm
    fields:
      - approval: { label: "˚Approve password update for: [Concord] → ${comma_concord_list} [Akeyless] → ${comma_akeyless_list}", type: boolean }
  
  - if: ${ApprovalForm.approval}
    then:
      - log: "[INFO] Accepted for Password update ..."
    else:
      - throw: "[ERROR] Password update is not accepted ..."

  - task: concordSecrets
    in:
      action: getAsString
      name: sadcslinuxsvc_pass
    out: sadcs_pass

  - if: ${service == "SVCWindowsCM"}
    then:
      - try:
        - call: Akeyless
          in:
            path: "/Prod/WCNP/homeoffice/ConfigurationManagement/puppet/PE"
            user: "${akeyless_list}"
        - call: WMConfig
          in:
            config: "${WM_Config}"
          withItems: "${concord_list}"
        error:
        - log: "[ERROR] Failed to update SVCWindowsCM secrets"
        - throw: "SVCWindowsCM update failed"

  - if: ${service == "saDCSlinuxSVC"}
    then:
      - try:
        - script: ruby
          body: |
            require 'base64'
            v = $execution.variables().get('svc_pass')
            text = "sadcslinuxsvc:" + v
            encoded = Base64.encode64(text)
            $result.set("myVar", encoded);
          out:
            svc_base64: ${result.myVar}

        - call: concord
          in:
            base64_val: "${svc_base64}"
          withItems: "${concord_list}"
        error:
        - log: "[ERROR] Failed to update saDCSlinuxSVC secrets"
        - throw: "saDCSlinuxSVC update failed"
     
  - if: ${service == "SVC_Puppeteer"}
    then: 
      - try:
        - call: Akeyless
          in:
            path: "/Prod/WCNP/homeoffice/ConfigurationManagement/puppet_api"
            user: "svc_pass_test"
        error:
        - log: "[ERROR] Failed to update SVC_Puppeteer secrets"
        - throw: "SVC_Puppeteer update failed"

  - if: ${service == "SVCpuptlmtd"}
    then:
      - try:
        - call: Akeyless
          in:
            path: "/Prod/WCNP/homeoffice/ConfigurationManagement/puppet/PE"
            user: "svcpuptlmtd_test"
        error:
        - log: "[ERROR] Failed to update SVCpuptlmtd secrets"
        - throw: "SVCpuptlmtd update failed"

  - log: "[SUCCESS] Password update completed successfully"

  WMConfig:
  - try:
    - task: concordSecrets
      in:
        action: getAsString
        name: ${item}
      out: result
    - if: ${result.status != "OK"}
      then:
        - throw: "${item} 'NOT_FOUND'"
    
    - task: concordSecrets
      in:
        action: create
        name: "${item}_${date}"
        data: "${result.data}"
        createIfMissing: true
        debug: true
        teams:
          - name: "default"
            level: "OWNER"
      out: info
    
    - log: "Backup created: ${info}"
    
    - task: concordSecrets
      in:
        action: update
        name: "${item}"
        visibility: "PRIVATE"
        data: "${config}"
    
    - task: concordSecrets
      in:
        action: getAsString
        name: "${item}"
      out: result
    
    - log: "Updated secret validated: ${result}"
    error:
    - log: "[ERROR] WMConfig failed for item: ${item}"
    - throw: "WMConfig update failed for ${item}"
     
  # Concord Flow - Removed ignoreErrors flags
  concord:
  - try:
    - task: concordSecrets
      in:
        action: getAsString
        name: ${item}
      out: result
    
    - log: "Old Value retrieved for: ${item}"
    
    - if: ${result.status != "OK"}
      then:
        - throw: "${item} 'NOT_FOUND'"
    
    - task: concordSecrets
      in:
        action: create
        name: "${item}_${date}"
        data: "${result.data}"
        createIfMissing: true
    
    - log: "Backup created for: ${item}"
    
    - task: http
      in:
        url: "http://172.18.0.5:8001/api/v1/org/Default/secret/saDCSlinuxSVC_test_01_07_2025/access"
        method: POST
        request: json
        response: json
        headers:
          Authorization: "TJLvsCznelGebi1Y9ShQTQ" 
          Content-Type: "application/json"
        body:
          orgName: "Default"
          teamName: "default"
          level: "READER"
      out: httpResult
    
    - task: concordSecrets
      in:
        action: update
        name: "${item}"
        visibility: "PRIVATE"
        data: "${base64_val}"
    
    - task: concordSecrets
      in:
        action: getAsString
        name: ${item}
      out: newresult  
    
    - log: "Successfully updated: ${item}"
    error:
    - log: "[ERROR] Concord secret update failed for: ${item}"
    - throw: "Concord secret update failed for ${item}"

  Akeyless:
  - try:
    - log: "Updating Akeyless secret at path: ${path} for user: ${user}"
    # Add your Akeyless update logic here
    # Example placeholder:
    - task: http
      in:
        url: "https://akeyless-api-endpoint/update"
        method: POST
        request: json
        response: json
        headers:
          Authorization: "Bearer ${akeyless_token}"
          Content-Type: "application/json"
        body:
          path: "${path}"
          user: "${user}"
          password: "${svc_pass}"
    - log: "Successfully updated Akeyless secret for: ${user}"
    error:
    - log: "[ERROR] Akeyless update failed for user: ${user} at path: ${path}"
    - throw: "Akeyless update failed for ${user}"

  Ansible:
  - try:
    - form: Ansible
    - task: ansible
      in:
        auth:
          privateKey:
            user: "root"
            secret:
              org: "ComputeManagement" # optional
              name: "config_mgmt_ansible"
        inventory:
          - remote:
              hosts:
                - "pe-metrics.wal-mart.com"
        playbook: playbooks/update.yml
        extraVars:
          bind_password: "${Ansible.data}"
    error:
    - log: "[ERROR] Ansible playbook execution failed"
    - throw: "Ansible execution failed"

  onFailure:
  - log: "[FAILURE] Workflow failed, sending notification..."
  - call: sendUpdateNotification
    in:
      status: "Failed"
      error: "${lastError.cause}"
      service: "${service}"

  sendUpdateNotification:
  - log: "[NOTIFICATION] Sending failure notification for service: ${service}"
  - log: "[ERROR DETAILS] ${error}"
  # Add email notification here if needed
  - task: smtp
    in:
      host: "your-smtp-server"
      port: 587
      from: "${maintainerEmail}"
      to: ["admin@company.com"]
      subject: "Password Update Failed for ${service}"
      message: |
        Password update workflow failed for service: ${service}
        
        Error Details: ${error}
        
        Date: ${date}
        
        Please investigate and retry if necessary.
